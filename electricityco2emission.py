# -*- coding: utf-8 -*-
"""ElectricityCO2emission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tGJurclpiyNFK4F4tytsZfawYSFvwY9p

# Electricity related CO2 emission

**Author**: Apoorva Arbooj
<br><br>**Data Source**: The EIA website is used as data source for this notebook.
<br><br>**Data Link**: [EIA electricity data](https://www.eia.gov/electricity/data/eia923/)
<br><br>**Data description**:<br>The survey Form EIA-923 collects detailed electric power data -- monthly and annually -- on electricity generation, fuel consumption, fossil fuel stocks, and receipts at the power plant and prime mover level. Specific survey information provided:

*   Schedule 2 - fuel receipts and costs
*   Schedules 3A & 5A - generator data including generation, fuel consumption and stocks
*   Schedule 4 - fossil fuel stocks
*   Schedules 6 & 7 - non-utility source and disposition of electricity
*   Schedules 8A-F - environmental data

# Import Libraries and mount the drive
"""

import urllib.request
from bs4 import BeautifulSoup
from io import BytesIO
from urllib.request import urlopen
from zipfile import ZipFile
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly

# Ensuring charts appear when converting to HTML
#plotly.offline.init_notebook_mode(connected=True)

# Mount the drive
from google.colab import drive
drive.mount('/content/drive')

"""# Data Gathering

### YEAR WISE ELECTRICITY DATA
Methodology :The data is extracted from the website by web scraping
The webpage has links which enables downloading data in a compressed (zip) format. The links are arranged according to year.
"""

# Save the web page url in the 'data_url' variable 
data_url = "https://www.eia.gov/electricity/data/eia923/"

# Open the webpage using the url library and save the html in the 'webpage' variable
webpage = urllib.request.urlopen(data_url)

# Parse the html in the 'webpage' variable, and store it in Beautiful Soup format
soup = BeautifulSoup(webpage)

# Print the title of the web page
print(soup.title)

# Get all the links on the webpage
# A link in html is contained in the anchor tag (<a>)
all_links = soup.find_all('a')

# Create a dictionary to store the download links on webpage
# The dictionary, data_link will be of the form
# data_links = {year:year_link}
data_links = {}
for link in all_links:
    # The required links have the year as their title
    if link.get('title') and link.get('title').strip() in map(str,range(2001,2020)):
        data_links[link.get('title').strip()] = link.get('href')

# Checking if the data_links dictionary has been created successfully
data_links

# Update the data_links dictionary with the complete downloadable url link
for k,v in data_links.items():
  data_links[k] = "https://www.eia.gov/electricity/data/eia923/"+v

# Check the dictionary
data_links

# Unzipping without saving the zip file
# This cell of code will create a folder for each year and extract the files respectively
for k,v in data_links.items():
  print(f'Now downloading data for: {k}')
  zipurl = v
  with urlopen(zipurl) as zipresp:
    with ZipFile(BytesIO(zipresp.read())) as zfile:
      zfile.extractall('/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/'+k)

"""### CO2 emission data for fuels from EIA website

#### Perform web scrapping to get the CO2 emitted in pounds per MMBtu of fuel
Link: [CO2 emissions](https://www.eia.gov/environment/emissions/co2_vol_mass.php)
"""

fuel_soup = BeautifulSoup(urllib.request.urlopen("https://www.eia.gov/environment/emissions/co2_vol_mass.php"))

fuel_CO2_emission = dict()
for tr in fuel_soup.find_all('tr')[2:]:
    tds = tr.find_all('td')
    if(len(tds)==5):
      fuel_CO2_emission[" ".join(tds[0].text.lower().split())]=float(tds[3].text)

print(f'The no. of fuels for which we have the CO2 emissions in pounds per MMBtu is: {len(fuel_CO2_emission.keys())}')

fuel_CO2_emission

"""#### Get fuel description from sheet and create the final dataframe to refer for CO2 emissions

*   **Year** : 2019
*   **File Name**: EIA923_Schedules_2_3_4_5_M_12_2019_Final_Revision.xlsx
*   **Sheet name in file**: Page 7 File Layout
*   **Description**: This sheet has description for the fuel codes used in the dataset.
"""

sheet_fuel_data_2019 = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/2019/EIA923_Schedules_2_3_4_5_M_12_2019_Final_Revision.xlsx", sheet_name="Page 7 File Layout",skiprows=67, skipfooter=(767-108))

# Creating a copy of the sheet_fuel_data_2019 so that changes and be reverted by using the 'sheet_fuel_data_2019' dataframe again
# Reducing frequent /re-loading of data from file
CO2_fuel_data_2019 = sheet_fuel_data_2019.copy()

# Checking the data in 'CO2_fuel_data_2019'
CO2_fuel_data_2019.head()

# Rename the column with a shorter name
CO2_fuel_data_2019.rename(columns={"The fuel code reported to EIA.Two or three letter alphanumeric:":"description"},inplace=True)

# Convert the descriptions to lowercase
CO2_fuel_data_2019["description"] = CO2_fuel_data_2019["description"].str.lower()

# Rename the 'Reported Fuel Type Code' column so that it is in sync with the column name in sheet1
CO2_fuel_data_2019.rename(columns={"Reported Fuel Type Code":"Reported_Fuel_Type_Code"},inplace=True)

# Remove any trailing or leading whitespaces
CO2_fuel_data_2019["Reported_Fuel_Type_Code"] = CO2_fuel_data_2019["Reported_Fuel_Type_Code"].str.strip()

# Check if the above changes are replicated
CO2_fuel_data_2019.head()

# There are some fuels in the dataset for which the CO2 emission values are not present of the EIA website
# Initialise the 'CO2_emission_pound_per_MMBtu' column with 1
# Assumption: (defualt) 1 pound of CO2 is emitted per million Btu of fuel
CO2_fuel_data_2019["CO2_emission_pound_per_MMBtu"] = np.float(1)

# Create a column named 'mapped_fuel_name' to verify if the CO2 emission value was correctly referenced
# Initialize the column with empty string
CO2_fuel_data_2019["mapped_fuel_name"] = ''

# for each (k: fuel and v: CO2 emission value) pair in the dictionary 'fuel_CO2_emission'
for k,v in fuel_CO2_emission.items():
    # if CO2_fuel_data_2019["description"] / fuel description column in 'CO2_fuel_data_2019' dataframe contains the k (fuel) from the dictionary 'fuel_CO2_emission'
    # then assign / fill the column 'CO2_emission_pound_per_MMBtu' in 'CO2_fuel_data_2019' dataframe with v (CO2 emission value) from the dictionary 'fuel_CO2_emission'
    CO2_fuel_data_2019.loc[CO2_fuel_data_2019["description"].str.contains(k), "CO2_emission_pound_per_MMBtu"] = v

    CO2_fuel_data_2019.loc[CO2_fuel_data_2019["description"].str.contains(k), "mapped_fuel_name"] = k

# Check how the above code cell worked
CO2_fuel_data_2019

"""The pair ('*diesel and home heating fuel (distillate fuel oil)': 163.45*) in the fuel_CO2_emission dictionary, did not find the exact match in the CO2_fuel_data_2019["description"] column.
<br> Because CO2_fuel_data_2019["description"] column has *Distillate Fuel Oil. Including diesel, No. 1, No. 2, and No. 4 fuel oils*.

"""

CO2_fuel_data_2019.loc[CO2_fuel_data_2019["description"].str.contains('diesel'), "CO2_emission_pound_per_MMBtu"] = 163.45
CO2_fuel_data_2019.loc[CO2_fuel_data_2019["description"].str.contains('diesel'), "mapped_fuel_name"] = "diesel"

CO2_fuel_data_2019

CO2_fuel_data_2019.to_excel("fuel_CO2_emission.xlsx")

"""# 2019 Data

*   **Year** : 2019
*   **File Name**: EIA923_Schedules_2_3_4_5_M_12_2019_Final_Revision.xlsx
*   **Sheet name in file**: Page 1 Generation and Fuel Data
*   **Description**: This sheet has electricity generation and fuel data.
"""

data_2019 = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/2019/EIA923_Schedules_2_3_4_5_M_12_2019_Final_Revision.xlsx", sheet_name="Page 1 Generation and Fuel Data",skiprows=5)

print(f'In the 2019 dataset\n# rows: {data_2019.shape[0]}\n# columns: {data_2019.shape[1]}')

# Checking the datatypes of columns in the dataset
data_2019.dtypes

# Checking the dataset
data_2019.head()

# Extract columns that are required for further calculations
data_2019_workspace_dataframe = pd.concat([data_2019.iloc[:,[0,3,4,6,12,14,15,18]].copy(),data_2019.iloc[:,67:91].copy(),data_2019.iloc[:,94:].copy()],axis=1)

# Checking if the required columns are extracted in the dataframe
data_2019_workspace_dataframe.head()

# Check column names
data_2019_workspace_dataframe.columns

# Replace '\n' character and space in the column name with '_'
for c in data_2019_workspace_dataframe.columns:
    new_column_name = (c.replace("\n","_")).replace(" ","_")
    data_2019_workspace_dataframe.rename(columns={c:new_column_name},inplace=True)

# Check if the column names were replaces and renamed correctly
data_2019_workspace_dataframe.columns

# Monthly data has '.' so replace that with zero
# Replacing with zero won't impact the further calculations
for i in range(8,32):
    data_2019_workspace_dataframe.iloc[:,i].replace(to_replace={'.':0}, inplace=True)

# Checking the datatypes of all columns
data_2019_workspace_dataframe.dtypes

"""### Fuels used in 2019"""

list_fuel_type_code = list(data_2019_workspace_dataframe["Reported_Fuel_Type_Code"].unique())
print(f'The dataset has {len(list_fuel_type_code)} unique types of fuel.\nThe list of fuel type code is:\n{list_fuel_type_code}')

# Count the number of times a fuel appears in the dataset and store it in a dictionary
fuel_frequency = dict(data_2019_workspace_dataframe["Reported_Fuel_Type_Code"].value_counts())

# Convert the fuel_frequency dictionary to a dataframe
df_fuel_frequency = pd.DataFrame({"Reported_Fuel_Type_Code":fuel_frequency.keys(),"Frequency":fuel_frequency.values()})

# To find which fuel type is absent in the dataset
for f in CO2_fuel_data_2019["Reported_Fuel_Type_Code"].unique():
  if f not in list_fuel_type_code:
    print(f'{f} is absent from the "Electricity Generation and Fuel" dataset.')
# ANT is anthracite coal

df_fuel_frequency.head()

# Plot the 'df_fuel_frequency' dataframe
# Check fuels used for electricity generation from least to most
fig = px.bar(df_fuel_frequency, x="Frequency", y="Reported_Fuel_Type_Code", orientation='h')
fig.show()

"""**Note**: Solar energy topped the electricity generation in 2019 followed by 'Natural Gas' and 'DFO (Distillate Fuel Oil. Including diesel, No. 1, No. 2, and No. 4 fuel oils.)'

### Find CO2 emission in Metric tons and Carbon Intensity in MtCO2/MWh for 2019 dataset
"""

# Display the required 2019 data
data_2019_workspace_dataframe

# Merge the '2019 electricity generation and fuel' data with 'CO2 emission for fuels' data
data_2019_workspace_dataframe = pd.merge(data_2019_workspace_dataframe,CO2_fuel_data_2019,how='left',on=["Reported_Fuel_Type_Code"])

# Check the merge
data_2019_workspace_dataframe

# Count the null rows in the "Physical_Unit_Label" column
data_2019_workspace_dataframe["Physical_Unit_Label"].isnull().sum()

# Change the datatype of "Physical_Unit_Label" column to string
data_2019_workspace_dataframe["Physical_Unit_Label"] = data_2019_workspace_dataframe["Physical_Unit_Label"].astype('str')

# Verify the datatype
for unit in data_2019_workspace_dataframe["Physical_Unit_Label"].unique():
    print(f'{unit}\t{type(unit)}')

# For rows where "Physical_Unit_Label" is null, set the "CO2_emission_pound_per_MMBtu" value to zero
# Mostly, for renewable source of energy the "Physical_Unit_Label" is null
# Also, there is no CO2 emission in case of renewable source of energy
# SO, setting the "CO2_emission_pound_per_MMBtu" value to zero
data_2019_workspace_dataframe.loc[(data_2019_workspace_dataframe["Physical_Unit_Label"] == "nan"),"CO2_emission_pound_per_MMBtu"]=0

# Check the "CO2_emission_pound_per_MMBtu" column modification
data_2019_workspace_dataframe

"""Based on the website information, 1 MMBtu of 'Natural Gas' emits 116.65 pounds of CO2. 
<br>Hence to find Metric tons of CO2 emitted for the Elec_Fuel_Consumption_MMBtu, we have

<br>**Annual Fuel Consumption to generate electricity in MMBtu** = *data_2019_workspace_dataframe["Elec_Fuel_Consumption_MMBtu"]*
<br>**CO2 emission of the fuel in pound per MMBtu** = *data_2019_workspace_dataframe["CO2_emission_pound_per_MMBtu"]*

<br> **Annual CO2 emission of the fuel used to generate electricity in pounds per MMBtu** =  *data_2019_workspace_dataframe["Elec_Fuel_Consumption_MMBtu"] x data_2019_workspace_dataframe["CO2_emission_pound_per_MMBtu"]*

<br> **Annual CO2 emission of the fuel used to generate electricity in Metric tons per MMBtu** = *(Annual CO2 emission of the fuel used to generate electricity in pounds per MMBtu) / 2205*
"""

data_2019_workspace_dataframe["Annual_Elect_CO2_emission_MtCO2"] = (data_2019_workspace_dataframe["Elec_Fuel_Consumption_MMBtu"]*data_2019_workspace_dataframe["CO2_emission_pound_per_MMBtu"])/2205

"""**Carbon Intensity** = CO2 emitted per unit of electric energy generated
<br>**Carbon Intensity** = *(Total amount of electricity related CO2 emitted in Metric tons) / (Total amount of electricity produced in Megawatthours)* = *Carbon Intensity in MtCO2/MWh*
"""

# using fillna to handle 0/0 giving NaN
data_2019_workspace_dataframe["Annual_Carbon_Intensity_MtCO2_per_MWh"] = (data_2019_workspace_dataframe["Annual_Elect_CO2_emission_MtCO2"]/data_2019_workspace_dataframe["Net_Generation_(Megawatthours)"]).fillna(0)

# if above there was a (something)/0 case, then it gives inf so replace inf with 0 
data_2019_workspace_dataframe.loc[data_2019_workspace_dataframe["Annual_Carbon_Intensity_MtCO2_per_MWh"] == np.inf, "Annual_Carbon_Intensity_MtCO2_per_MWh"] = 0
data_2019_workspace_dataframe.loc[data_2019_workspace_dataframe["Annual_Carbon_Intensity_MtCO2_per_MWh"] == -np.inf, "Annual_Carbon_Intensity_MtCO2_per_MWh"] = 0

np.where(np.isinf(data_2019_workspace_dataframe["Annual_Carbon_Intensity_MtCO2_per_MWh"]))

# Display the data
data_2019_workspace_dataframe.head()

months = ["January","February","March","April","May","June","July","August","September","October","November","December"]

# Calculating monthly electricity related CO2 emission in Metric tons per MMBtu
for m in months:
    new_column = m+"_Elect_CO2_emission_MtCO2"
    existing_column = "Elec_MMBtu_"+m
    data_2019_workspace_dataframe[new_column] = (data_2019_workspace_dataframe["CO2_emission_pound_per_MMBtu"]*data_2019_workspace_dataframe[existing_column])/2205

data_2019_workspace_dataframe.head()

# Calculating monthly carbon intensity of electricity generation in Metric tons of CO2 per MegaWatthour
for m in months:
    new_column = m+"_Carbon_Intensity_MtCO2_per_MWh"
    numerator_column = m+"_Elect_CO2_emission_MtCO2"
    denominator_column = "Netgen_"+m
    data_2019_workspace_dataframe[new_column] = data_2019_workspace_dataframe[numerator_column]/data_2019_workspace_dataframe[denominator_column].fillna(0)
    data_2019_workspace_dataframe.loc[data_2019_workspace_dataframe[new_column] == np.inf, new_column] = 0
    data_2019_workspace_dataframe.loc[data_2019_workspace_dataframe[new_column] == -np.inf, new_column] = 0

data_2019_workspace_dataframe.head()

data_2019_workspace_dataframe.to_csv("Final_data_2019.csv")

"""### Carbon Intensity in MtCO2/MWh by Fuel type

#### ANNUALLY
"""

# Get a subset of data to calculate Annual_Carbon_Intensity_MtCO2_per_MWh by fuel
df_Annual_Carbon_Intensity_by_Fuel = pd.concat([data_2019_workspace_dataframe.iloc[:,[5,39]].copy()],axis=1)

df_Annual_Carbon_Intensity_by_Fuel

# Perform summation by grouping by 'fuel code'
df_Annual_Carbon_Intensity_by_Fuel=df_Annual_Carbon_Intensity_by_Fuel.groupby(by=["Reported_Fuel_Type_Code"]).sum()

# reset the index
df_Annual_Carbon_Intensity_by_Fuel.reset_index(level=0,inplace=True)

# sort data in descending order of 'Annual_Carbon_Intensity_MtCO2_per_MWh'
df_Annual_Carbon_Intensity_by_Fuel=df_Annual_Carbon_Intensity_by_Fuel.sort_values(by=["Annual_Carbon_Intensity_MtCO2_per_MWh"], ascending=False)

df_Annual_Carbon_Intensity_by_Fuel

# Create a data copy where the Carbon Intensity value is greater than 1 for plotting it in a bar chart
df_Annual_Carbon_Intensity_by_Fuel_Plotting_data = df_Annual_Carbon_Intensity_by_Fuel[df_Annual_Carbon_Intensity_by_Fuel["Annual_Carbon_Intensity_MtCO2_per_MWh"]>1].copy()

# Round the float numbers to 3
df_Annual_Carbon_Intensity_by_Fuel_Plotting_data["Annual_Carbon_Intensity_MtCO2_per_MWh"] = df_Annual_Carbon_Intensity_by_Fuel_Plotting_data["Annual_Carbon_Intensity_MtCO2_per_MWh"].round(3)

fig = px.bar(df_Annual_Carbon_Intensity_by_Fuel_Plotting_data, 
             x="Reported_Fuel_Type_Code", 
             y="Annual_Carbon_Intensity_MtCO2_per_MWh", 
             text="Annual_Carbon_Intensity_MtCO2_per_MWh")
fig.show()

"""#### MONTHLY"""

df_Monthly_Carbon_Intensity_by_Fuel = pd.concat([data_2019_workspace_dataframe.iloc[:,[5]].copy(),data_2019_workspace_dataframe.iloc[:,52:].copy()],axis=1)

df_Monthly_Carbon_Intensity_by_Fuel=df_Monthly_Carbon_Intensity_by_Fuel.groupby(by=["Reported_Fuel_Type_Code"]).sum()

df_Monthly_Carbon_Intensity_by_Fuel.reset_index(level=0,inplace=True)

df_Monthly_Carbon_Intensity_by_Fuel=df_Monthly_Carbon_Intensity_by_Fuel.sort_values(by=["January_Carbon_Intensity_MtCO2_per_MWh"], ascending=False)

df_Monthly_Carbon_Intensity_by_Fuel

fig = px.bar(df_Monthly_Carbon_Intensity_by_Fuel,
             x="Reported_Fuel_Type_Code",
             y="January_Carbon_Intensity_MtCO2_per_MWh")
fig.show()

"""### Carbon Intensity in MtCO2/MWh by State

#### ANNUALLY
"""

df_Annual_Carbon_Intensity_by_State = pd.concat([data_2019_workspace_dataframe.iloc[:,[3,39]].copy()],axis=1)
df_Annual_Carbon_Intensity_by_State=df_Annual_Carbon_Intensity_by_State.groupby(by=["Plant_State"]).sum()
df_Annual_Carbon_Intensity_by_State.reset_index(level=0,inplace=True)
df_Annual_Carbon_Intensity_by_State=df_Annual_Carbon_Intensity_by_State.sort_values(by=["Annual_Carbon_Intensity_MtCO2_per_MWh"], ascending=False)

df_Annual_Carbon_Intensity_by_State

df_Annual_Carbon_Intensity_by_State_Plotting_data = df_Annual_Carbon_Intensity_by_State.nlargest(10,'Annual_Carbon_Intensity_MtCO2_per_MWh').copy()

df_Annual_Carbon_Intensity_by_State_Plotting_data["Annual_Carbon_Intensity_MtCO2_per_MWh"]=df_Annual_Carbon_Intensity_by_State_Plotting_data["Annual_Carbon_Intensity_MtCO2_per_MWh"].round(3)

fig = px.bar(df_Annual_Carbon_Intensity_by_State_Plotting_data, 
             x="Plant_State", 
             y="Annual_Carbon_Intensity_MtCO2_per_MWh", 
             text="Annual_Carbon_Intensity_MtCO2_per_MWh",
             color="Annual_Carbon_Intensity_MtCO2_per_MWh")
fig.show()

"""#### MONTHLY"""

df_Monthly_Carbon_Intensity_by_State = pd.concat([data_2019_workspace_dataframe.iloc[:,[3]].copy(),data_2019_workspace_dataframe.iloc[:,52:].copy()],axis=1)
df_Monthly_Carbon_Intensity_by_State=df_Monthly_Carbon_Intensity_by_State.groupby(by=["Plant_State"]).sum()
df_Monthly_Carbon_Intensity_by_State.reset_index(level=0,inplace=True)
df_Monthly_Carbon_Intensity_by_State=df_Monthly_Carbon_Intensity_by_State.sort_values(by=["January_Carbon_Intensity_MtCO2_per_MWh"], ascending=False)

df_Monthly_Carbon_Intensity_by_State

"""### Carbon Intensity in MtCO2/MWh by Power Plant

#### ANNUALLY
"""

df_Annual_Carbon_Intensity_by_PowerPlant = pd.concat([data_2019_workspace_dataframe.iloc[:,[0,1,39]].copy()],axis=1)

df_Annual_Carbon_Intensity_by_PowerPlant.head()

df_Annual_Carbon_Intensity_by_PowerPlant = pd.concat([data_2019_workspace_dataframe.iloc[:,[0,1,39]].copy()],axis=1)
df_Annual_Carbon_Intensity_by_PowerPlant=df_Annual_Carbon_Intensity_by_PowerPlant.groupby(by=["Plant_Name"]).sum()
df_Annual_Carbon_Intensity_by_PowerPlant.reset_index(level=0,inplace=True)
df_Annual_Carbon_Intensity_by_PowerPlant=df_Annual_Carbon_Intensity_by_PowerPlant.sort_values(by=["Annual_Carbon_Intensity_MtCO2_per_MWh"], ascending=False)

df_Annual_Carbon_Intensity_by_PowerPlant

df_Annual_Carbon_Intensity_by_PowerPlant_Plotting_data = df_Annual_Carbon_Intensity_by_PowerPlant.nlargest(10,'Annual_Carbon_Intensity_MtCO2_per_MWh')

df_Annual_Carbon_Intensity_by_PowerPlant_Plotting_data["Annual_Carbon_Intensity_MtCO2_per_MWh"]=df_Annual_Carbon_Intensity_by_PowerPlant_Plotting_data["Annual_Carbon_Intensity_MtCO2_per_MWh"].round(3)

fig = px.bar(df_Annual_Carbon_Intensity_by_PowerPlant_Plotting_data, 
             x="Plant_Name", 
             y="Annual_Carbon_Intensity_MtCO2_per_MWh", 
             text="Annual_Carbon_Intensity_MtCO2_per_MWh")
fig.show()

"""#### MONTHLY"""

df_Monthly_Carbon_Intensity_by_PowerPlant = pd.concat([data_2019_workspace_dataframe.iloc[:,[0,1]].copy(),data_2019_workspace_dataframe.iloc[:,52:].copy()],axis=1)
df_Monthly_Carbon_Intensity_by_PowerPlant=df_Monthly_Carbon_Intensity_by_PowerPlant.groupby(by=["Plant_Name"]).sum()
df_Monthly_Carbon_Intensity_by_PowerPlant.reset_index(level=0,inplace=True)
df_Monthly_Carbon_Intensity_by_PowerPlant=df_Monthly_Carbon_Intensity_by_PowerPlant.sort_values(by=["January_Carbon_Intensity_MtCO2_per_MWh"], ascending=False)

df_Monthly_Carbon_Intensity_by_PowerPlant



"""# 2019 - 2009 Data """

data_2018 = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/2018/EIA923_Schedules_2_3_4_5_M_12_2018_Final_Revision.xlsx", sheet_name="Page 1 Generation and Fuel Data",skiprows=5)

data_2017 = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/2017/EIA923_Schedules_2_3_4_5_M_12_2017_Final_Revision.xlsx", sheet_name="Page 1 Generation and Fuel Data",skiprows=5)

data_2016 = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/2016/EIA923_Schedules_2_3_4_5_M_12_2016_Final_Revision.xlsx", sheet_name="Page 1 Generation and Fuel Data",skiprows=5)

data_2015 = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/2015/EIA923_Schedules_2_3_4_5_M_12_2015_Final_Revision.xlsx", sheet_name="Page 1 Generation and Fuel Data",skiprows=5)

data_2014 = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/2014/EIA923_Schedules_2_3_4_5_M_12_2014_Final_Revision.xlsx", sheet_name="Page 1 Generation and Fuel Data",skiprows=5)

data_2013 = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/2013/EIA923_Schedules_2_3_4_5_2013_Final_Revision.xlsx", sheet_name="Page 1 Generation and Fuel Data",skiprows=5)

data_2012 = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/2012/EIA923_Schedules_2_3_4_5_M_12_2012_Final_Revision.xlsx", sheet_name="Page 1 Generation and Fuel Data",skiprows=5)

data_2011 = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/2011/EIA923_Schedules_2_3_4_5_2011_Final_Revision.xlsx", sheet_name="Page 1 Generation and Fuel Data",skiprows=5)

data_2010 = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/2010/EIA923 SCHEDULES 2_3_4_5 Final 2010.xls", sheet_name="Page 1 Generation and Fuel Data",skiprows=7)

data_2009 = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/ElectricityCO2Emission/AllData/2009/EIA923 SCHEDULES 2_3_4_5 M Final 2009 REVISED 05252011.XLS", sheet_name="Page 1 Generation and Fuel Data",skiprows=7)

data_2019_dataframe = pd.concat([data_2019.iloc[:,[14,18]].copy(),data_2019.iloc[:,94:].copy()],axis=1)
data_2018_dataframe = pd.concat([data_2018.iloc[:,[14,18]].copy(),data_2018.iloc[:,94:].copy()],axis=1)
data_2017_dataframe = pd.concat([data_2017.iloc[:,[14,18]].copy(),data_2017.iloc[:,94:].copy()],axis=1)
data_2016_dataframe = pd.concat([data_2016.iloc[:,[14,18]].copy(),data_2016.iloc[:,94:].copy()],axis=1)
data_2015_dataframe = pd.concat([data_2015.iloc[:,[14,18]].copy(),data_2015.iloc[:,94:].copy()],axis=1)
data_2014_dataframe = pd.concat([data_2014.iloc[:,[14,18]].copy(),data_2014.iloc[:,94:].copy()],axis=1)
data_2013_dataframe = pd.concat([data_2013.iloc[:,[14,18]].copy(),data_2013.iloc[:,94:].copy()],axis=1)
data_2012_dataframe = pd.concat([data_2012.iloc[:,[14,18]].copy(),data_2012.iloc[:,94:].copy()],axis=1)
data_2011_dataframe = pd.concat([data_2011.iloc[:,[14,18]].copy(),data_2011.iloc[:,94:].copy()],axis=1)
data_2010_dataframe = pd.concat([data_2010.iloc[:,[14,18]].copy(),data_2010.iloc[:,94:].copy()],axis=1)
data_2009_dataframe = pd.concat([data_2009.iloc[:,[14,18]].copy(),data_2009.iloc[:,94:].copy()],axis=1)

dataframes = [data_2009_dataframe,data_2010_dataframe,data_2011_dataframe,data_2012_dataframe,data_2013_dataframe,data_2014_dataframe,data_2015_dataframe,data_2016_dataframe,data_2017_dataframe,data_2018_dataframe,data_2019_dataframe]

for df in dataframes:
    for c in df.columns:
        new_column_name = (c.replace("\n","_")).replace(" ","_").lower()
        df.rename(columns={c:new_column_name},inplace=True)

data_2009_dataframe.rename(columns={"elec_fuel_consumption_mmbtus":"elec_fuel_consumption_mmbtu"},inplace=True)
data_2010_dataframe.rename(columns={"elec_fuel_consumption_mmbtus":"elec_fuel_consumption_mmbtu"},inplace=True)

final_dataframe = pd.concat(dataframes)

final_dataframe

fuel_data = CO2_fuel_data_2019.copy()

for c in fuel_data.columns:
    new_column_name = c.lower()
    fuel_data.rename(columns={c:new_column_name},inplace=True)

fuel_data

final_dataframe = pd.merge(final_dataframe,fuel_data,how='left',on=["reported_fuel_type_code"])

final_dataframe.head()

final_dataframe["physical_unit_label"] = final_dataframe["physical_unit_label"].astype('str')

final_dataframe.loc[(final_dataframe["physical_unit_label"] == "nan"),"co2_emission_pound_per_mmbtu"]=0

# 1 MMBtu of 'Natural Gas' emits 116.65 pounds of CO2
# Find Mt of CO2 emitted for the Elec_Fuel_Consumption_MMBtu
final_dataframe["annual_elect_CO2_emission_MtCO2"] = (final_dataframe["elec_fuel_consumption_mmbtu"]*final_dataframe["co2_emission_pound_per_mmbtu"])/2205

# Carbon Intensity = CO2 emitted per unit of electric energy generated
# Carbon Intensity = (Total amount of electricity related CO2 emitted in Metric tons) / (Total amount of electricity produced in Megawatthours) = Carbon Intensity in MtCO2/MWh

# using fillna to handle 0/0 giving NaN
final_dataframe["annual_carbon_intensity_MtCO2_per_MWh"] = (final_dataframe["annual_elect_CO2_emission_MtCO2"]/final_dataframe["net_generation_(megawatthours)"]).fillna(0)

# if above there was a (something)/0, then it gives inf so replace inf with 0 
final_dataframe.loc[final_dataframe["annual_carbon_intensity_MtCO2_per_MWh"] == np.inf, "annual_carbon_intensity_MtCO2_per_MWh"] = 0
final_dataframe.loc[final_dataframe["annual_carbon_intensity_MtCO2_per_MWh"] == -np.inf, "annual_carbon_intensity_MtCO2_per_MWh"] = 0

df_Annual_Carbon_Intensity_by_Year = pd.concat([final_dataframe.iloc[:,[4,9]].copy()],axis=1)

df_Annual_Carbon_Intensity_by_Year=df_Annual_Carbon_Intensity_by_Year.groupby(by=["year"]).sum()

df_Annual_Carbon_Intensity_by_Year.reset_index(level=0,inplace=True)

df_Annual_Carbon_Intensity_by_Year["annual_carbon_intensity_MtCO2_per_MWh"] = df_Annual_Carbon_Intensity_by_Year["annual_carbon_intensity_MtCO2_per_MWh"].round(3)

fig = px.bar(df_Annual_Carbon_Intensity_by_Year, y="annual_carbon_intensity_MtCO2_per_MWh", x="year", text="annual_carbon_intensity_MtCO2_per_MWh")
fig.show()

"""**Note**:
The yearly data shows 2013 being the year with the highest CO2 emission. More digging can be done to check the cause of this excess power generation. Or maybe one particular fuel / group of fuels with a high CO2 emission value caused this.
"""

#!jupyter nbconvert — to html ElectricityCO2emission.ipynb

# Restore the notebook mode
plotly.io.renderers.default = 'colab'

